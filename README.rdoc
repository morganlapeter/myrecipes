== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

testing specs for recipes:
name: string
summary: text
description: text

-name must be present
-name must be between 5 and less than 100 characters
-summary must be present
-summary must be btwn 10 and less than 150 characters
-description must be present
-description must be betwn 20 and 500 characters
-chef_id must be present


-chefname must be present
-chefname must be between 3 and less than 40 characters
-email must be present
-email must be unique (since we'll use this for logins later)
-email must be valid


Chefs:

What we have already:
-Chef model and validations
-chefs table with columns chefname and email

What we need to do:
-Add passwords to chefs table so chefs can be authenticated and logged in
-Use email as log in credentials, since email is unique
-Ability to register new chefs to use the app
-Ability to display chefs profile
-Ability to list chefs using the app 
-Ability for chefs to log in and log out of the app
-Restrict actions like create recipe, edit recipe and like reature to logged in chefs only
-Restricting edit of recipes by chefs who created the recipes





FOR REVIEWS
Thing's you'll need:
1. Migration to create reviews table, body, type = text_field, two foreign keys, reference chef_id, reference recipe_id
2. You'll need to then build the Review model
3. You'll need to create tests for the spec, add validations to the review model (we did this for chefs and recipes models)
4. Build the associations, has_many and belongs_to (btwn recipes and reviews, also btwn chefs and reviews)
5. Test out associations in Rails console
- recipe.reviews (grab Recipe.first)
- chef.reviews
6. Create routes
7. Authenticated chefs can create reviews, before_action require_user
8. You'll definitiely need to associate a chef_id and recipe_id
9. Use existing code if possible (ie text box from form add recipe).

use a git branch?